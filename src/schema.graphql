# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: ID!
}

# An edge in a connection.
type PetEdge {
  # A cursor for use in pagination
  cursor: String!
  # The item at the end of the edge
  node: Pet!
}

# The connection type for Pet.
type PetConnection {
  # A list of edges.
  edges: [PetEdge!]!

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

"""
An enumeration of possible pet types.
"""
enum PetType {
  CAT
  DOG
}

"""
Represents a user in the system.
"""
type User implements Node {
  id: ID!
  username: String!
  pets: [Pet!]
  firstName: String @deprecated(reason: "Use 'username' instead.")
}

"""
Input type for filtering pets by type.
"""
input PetsInput {
  type: PetType
}

"""
Represents a pet in the system.
"""
type Pet implements Node {
  id: ID!
  type: PetType!
  name: String!
  owner: User
  img: String!
  createdAt: String!
}

"""
Root query type for fetching data.
"""
type Query {
  user(id: String!): User!
  pets(
    # Returns the items in the list that come after the specified cursor.
    after: ID

    # Returns the items in the list that come before the specified cursor.
    before: ID

    # Returns the first n items from the list.
    first: Int

    # Returns the last n items from the list.
    last: Int
  ): PetConnection!
  petsByType(type: PetType!): [Pet]!
}

"""
Input type for adding a new pet.
"""
input NewPetInput {
  name: String!
  type: PetType!
  ownerId: ID!
}

"""
Root mutation type for modifying data.
"""
type Mutation {
  addPet(input: NewPetInput!): AddPetResponse!
}

type AddPetResponse {
  code: Int!
  success: Boolean!
  message: String!
  pet: Pet
}
